# Importing libraries
#importing python libraries

import numpy as np 
import pandas as pd 
import seaborn as sns
!pip install plotly
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt

import plotly.express as px
from plotly.offline import iplot, init_notebook_mode
import plotly.offline as py
py.init_notebook_mode(connected=True)
!pip install pycountry


import warnings
warnings.filterwarnings('ignore')
# Importing Modified dataset
df = pd.read_csv('https://raw.githubusercontent.com/yrtha/worldpopulation2023/main/World-Population-2023.csv')                  
df.head()
# checking our data
# let's check to see how many null objects we have in the dataset
df.isnull().sum()
# learn more about with our dataset
df.info()
# converting the column names into strings

df.columns = list(map(str, df.columns))
# converting the column names into strings

df.columns = list(map(str, df.columns))

years = list(map(str, (1970, 1980, 1990, 2000, 2010, 2015, 2020, 2022, 2023)))
years
# let's view our statistical summary

df.describe().T.sort_values(ascending=0, by="mean")
# Exploratory Data Analysis
#lets check current world population 2023                      
df['2023'].sum()
# plotting world population trend since 1970

plt.subplots(figsize=(10,5))
trend = df.iloc[:,5:14].sum()[::-1]
sns.lineplot(x=trend.index, y=trend.values, marker="o")
plt.xticks(rotation=0)
plt.ylabel("Population")
plt.title("World Population Trend (1970-2023)")
plt.show()
#  plotting current world population on map

import pycountry
countries = {}
for country in pycountry.countries:
    countries[country.name] = country.alpha_3

    
# get average of a list
def Average(list):
    return sum(list) / len(list)

df_cp2023 = df.loc[:,["cca3", "Country","2023"]]
df_cp2023["cca3"] = [countries.get(x, 'Unknown code') for x in df_cp2023["Country"]]

fig = px.choropleth(df_cp2023, locations="cca3",
                    hover_name="Country",
                    hover_data=df_cp2023.columns,
                    color="2023",
                    color_continuous_scale="Viridis",
                    range_color=(min(df_cp2023["2023"]), max(df_cp2023["2023"])), 
                    projection="natural earth")

fig.update_layout(margin={"r":5,"t":0,"l":5,"b":0})

# If on colab use -> fig.show(renderer="colob") instead of code on next line
fig.show()
# copying dataframe 'df' to 'df_copy'

df_copy = df.copy()
df_copy.head()
df_copy.set_index('Country', inplace=True)

#top 10 populated countries
df_copy.sort_values(by='2023', ascending=True, inplace=True)

df_top10 = df_copy['2023'].tail(10)
df_top10
#plotting bar chart of most populated countries
df_top10.plot(kind='barh', figsize=(12, 10), color='maroon')
plt.xlabel('Population')
plt.title('Top 10 Most Populated Countries in 2023')

plt.show()
# let's see pie chart for top populated nations

df_top10.plot(kind = 'pie', figsize=(25,10), autopct='%1.1f%%') # autopct create % number
plt.title(' Top 10 Populated Countries')
plt.show()
#bottom 10 populated countries
df_copy.sort_values(by='2023', ascending=True, inplace=True)

df_bottom10 = df_copy['2023'].head(10)
df_bottom10
df_bottom10.plot(kind='barh', figsize=(10, 9), color='darkblue')
plt.xlabel('Population')
plt.title('Top 10 Least Populated Countries in 2023')

plt.show()
# plotting top 10 populated countries trend

inplace = True 
df_copy.sort_values(by='2023', ascending=False, axis=0, inplace=True)

df_top_10 = df_copy.head(10)

df_top_10 = df_top_10[years].transpose() 

df_top_10.index = df_top_10.index.map(int)
df_top_10.plot(kind='line', figsize=(15, 10)) 

plt.title('Trend Line of the Top Most Populated Countries through the Decades')
plt.ylabel('Population')
plt.xlabel('Years')
plt.show()
#  top 10 countries with least population trend.

inplace = True 
df_copy.sort_values(by='2023', ascending=False, axis=0, inplace=True)

df_bottom10 = df_copy.tail(10)

df_bottom10 = df_bottom10[years].transpose() 

df_bottom10.index = df_bottom10.index.map(int)
df_bottom10.plot(kind='line', figsize=(14, 8)) 

plt.title('Trend of Top 10 Countries with Least population')
plt.ylabel('Populaton')
plt.xlabel('Years')
plt.show()
# India vs China
# India vs China

india_china_df = df.loc[df['Country'].isin(['India','China'])]
india_china_df
# Evolution of the population - India vs China

dfx = df.copy()
dfx.drop('Continent',axis=1,inplace=True)
dfy = india_china_df[['Country', '1970', '1980', '1990', '2000', '2010', '2015', '2020', '2022','2023']]
dfy = dfy.transpose()
cols = dfy.iloc[0].to_list()
dfy.columns = cols
dfy = dfy.iloc[1:, :]
for i in dfy.columns:
    dfy[i] = dfy[i].astype(int)
dfy = dfy.iloc[:,:2]
dfy.plot(figsize=(15, 8));
# Continent Analysis
# creating dataframe for 'Continent'

continent_df = df.groupby(by='Continent').sum()
continent_df= continent_df.drop("Rank", axis='columns')
continent_df
# creating dataframe for 'Country'

country_df = df.groupby(by='Country').sum()
country_df.head()
# let's see pie chart distribution for continent_df

continent_df['2023'].plot(kind = 'pie', figsize=(10,8), shadow=True, autopct='%1.1f%%') # autopct create %
plt.title(' Population Distribution by Continent')
plt.axis('equal')
plt.show()
# let's see world population by continent

fig = px.bar(data_frame= df.groupby('Continent' , as_index= False).sum().sort_values('2023', ascending=False), x= 'Continent' , y= '2023')
fig.update_layout(title= 'Current (2023) World Population per Continent', title_x= 0.5)

fig.show() # If on colab use -> fig.show(renderer="colob") 

# let's see number of countries per continent

df_country=df['Continent'].value_counts()
fig=px.bar(x=df_country.index,
          y=df_country.values,
          color=df_country.index,
          color_discrete_sequence=px.colors.sequential.YlOrRd,
          text=df_country.values,
          title= 'Number of Countries By Continent')

fig.update_layout(xaxis_title="Countries",
                 yaxis_title="Count")

fig.show() # If on colab use -> fig.show(renderer="colob") 

# Asia
asian_countries = df.loc[df["Continent"]=="Asia"].sort_values(by=["2023"], ascending=False, ignore_index=True)

# Africa
african_countries = df.loc[df["Continent"]=="Africa"].sort_values(by=["2023"], ascending=False, ignore_index=True)

# Europe
european_countries = df.loc[df["Continent"]=="Europe"].sort_values(by=["2023"], ascending=False, ignore_index=True)

# North America
na_countries = df.loc[df["Continent"]=="North America"].sort_values(by=["2023"], ascending=False, ignore_index=True)

# Oceania
oc_countries = df.loc[df["Continent"]=="Oceania"].sort_values(by=["2023"], ascending=False, ignore_index=True)

# South America
sa_countries = df.loc[df["Continent"]=="South America"].sort_values(by=["2023"], ascending=False, ignore_index=True)
# Asian countries

bottom_asian_countries = asian_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(4)

sns.barplot(data=bottom_asian_countries, x="Country", y="2023",palette = 'hls')
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title(" Least Populated Countries in Asia")
plt.show()



# African countries
bottom_african_countries = african_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(3)

sns.barplot(data=bottom_african_countries, x="Country", y="2023",palette = 'hsv')
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title("Least Populated Countries in Africa")
plt.show()


# European countries
bottom_european_countries = european_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(4)

sns.barplot(data=bottom_european_countries, x="Country", y="2023")
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title("Least Populated Countries in Europe")
plt.show()


# North American countries
bottom_na_countries = na_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(6)

sns.barplot(data=bottom_na_countries, x="Country", y="2023",palette = 'Set1')
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title("Least Populated Countries in North America")
plt.show()


# South American countries
bottom_sa_countries = sa_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(3)

sns.barplot(data=bottom_sa_countries, x="Country", y="2023",palette = 'prism')
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title("Least Populated Countries in South America")
plt.show()


# Oceania countries
bottom_oc_countries = oc_countries[["Country", "2023"]].sort_values(by="2023", ascending=True).head(3)

sns.barplot(data=bottom_oc_countries, x="Country", y="2023",palette = 'Set3')
plt.xlabel("Country")
plt.ylabel("2023 Population")
plt.title("Least Populated Countries in Oceania")
plt.show()
# plotting Area distribution on map by country
import plotly.express as px

fig = px.choropleth(df,
                     locations='Country',
                     locationmode='country names',
                     color='Area',
                     color_continuous_scale='Viridis',
                     template='plotly',
                     title = 'Area (kmÂ²)')

fig.update_layout(font = dict(size = 18, family="Gothic"))
fig.show()  # If on colab use -> fig.show(renderer="colob") 
# Biggest countries in each continent interms of 2023 Population, Area, Density
cols = ['2023','2022','2020', '2015', '2010','2000', '1990', '1980',
'1970', 'Area', 'Density', 'GrowthRate','WorldPercentage']
xols = ['2023','Area', 'Density']
for i in xols:    
    df_cc = df.groupby(['Continent','Country']).sum(numeric_only=True)[i]
    df_cc = df_cc.reset_index()
    fig = px.treemap(df_cc, path=['Continent','Country'], values=i, color =i, color_continuous_scale='Viridis_r', title=f'{i} Treemap')
    fig.show()  # If on colab use -> fig.show(renderer="colob") 
    fig.write_html(f"{i} heatmap.html")
# Area Analysis
# plotting total area distribution by continents

import plotly.graph_objects as go

df_cont= df['Continent'].unique()

tot_area_cont = []

for each in df_cont:
    df_area = df[df.Continent == each]
    area = sum(df_area["Area"])
    tot_area_cont.append(area)
    
tot_area_cont = pd.DataFrame(tot_area_cont)
df_area = pd.DataFrame(df_cont, columns = ["continent"])
df_area["total"] = tot_area_cont

fig = go.Figure(data=[go.Pie(labels=df_area.continent, values=df_area.total, textinfo='label+percent',insidetextorientation='radial')])
fig.show()  # If on colab use -> fig.show(renderer="colob") 
# copying dataframe 'df' to 'df_copy'

df_copy = df.copy()
df_copy.head()

df_copy.set_index('Country', inplace=True)

df_copy.sort_values(by='Area', ascending=True, inplace=True)

df_top10Area = df_copy['Area'].tail(10)
df_top10Area

# plotting top 10 Area occupied countries

df_top10Area.plot(kind='barh', figsize=(10, 10), color='green')
plt.xlabel('Area')
plt.title('Top 10 Countries that has the most Area')

plt.show()
# copying dataframe 'df' to 'df_copy'

df_copy = df.copy()
df_copy.head()

df_copy.set_index('Country', inplace=True)

df_copy.sort_values(by='Area', ascending=True, inplace=True)

df_bottom10Area = df_copy['Area'].head(10)
df_bottom10Area

# plotting bottom 10 Area occupied countries

df_bottom10Area.plot(kind='barh', figsize=(10, 8), color='grey')
plt.xlabel('Area')
plt.title('Top 10 Countries that has the least Area')

plt.show()
Visualizing it in another method
# Plotting a horizontal bar chart to show the top 10 countries with the largest area in 2023
MostArea = df.nlargest(10, 'Area')

plt.figure(figsize=(10, 6))
bars = plt.barh(MostArea['Country'], MostArea['Area'], color='skyblue', edgecolor='black')

plt.xlabel('Area / kmÂ²')
plt.ylabel('Country')
plt.title('Top 10 Countries with Most Area in 2023')
plt.grid(axis='x')

# Adding data labels on the bars
for bar in bars:
    width = bar.get_width()
    plt.text(width + 100000, bar.get_y() + bar.get_height() / 2, f'{width:,}', ha='left', va='center', fontsize=12)

plt.show()
# Plotting a horizontal bar chart to show the top 10 countries with the smallest area in 2023
SmallestArea = df.nsmallest(10, 'Area')

plt.figure(figsize=(10, 6))
bars = plt.barh(SmallestArea['Country'], SmallestArea['Area'], color='skyblue', edgecolor='black')

plt.xlabel('Area / kmÂ²')
plt.ylabel('Country')
plt.title('Top 10 Countries with Least Area in 2023')
plt.grid(axis='x')



plt.show()
# Density Analysis
# Plotting a horizontal bar chart to show the top 10 countries with the largest area in 2023
MostDense = df.nlargest(10, 'Density')

plt.figure(figsize=(10, 6))
bars = plt.barh(MostDense['Country'], MostDense['Density'], color='red', edgecolor='black')

plt.xlabel('Density')
plt.ylabel('Country')
plt.title('Top 10 Countries with Most Density in 2023')
plt.grid(axis='x')



plt.show()
# Plotting a horizontal bar chart to show the top 10 countries with the largest area in 2023
LeastDense = df.nsmallest(10, 'Density')

plt.figure(figsize=(10, 6))
bars = plt.barh(LeastDense['Country'], LeastDense['Density'], color='blue', edgecolor='black')

plt.xlabel('Density')
plt.ylabel('Country')
plt.title('Top 10 Countries with Least Density in 2023')
plt.grid(axis='x')


plt.show()
#Denisty per continents
# Creating one dataset per continent 
df_asia = df.loc[df['Continent'].isin(['Asia'])]
df_europe = df.loc[df['Continent'].isin(['Europe'])]
df_africa = df.loc[df['Continent'].isin(['Africa'])]
df_north_america = df.loc[df['Continent'].isin(['North America'])]
df_south_america = df.loc[df['Continent'].isin(['South America'])]
df_oceania = df.loc[df['Continent'].isin(['Oceania'])]
# Creating a dataset with all continents and world.

data = [['Africa', df_africa['2023'].sum() / df_africa['Area'].sum()],
        ['Asia', df_asia['2023'].sum() / df_asia['Area'].sum()],
        ['Europe', df_europe['2023'].sum() / df_europe['Area'].sum()],
        ['North America', df_north_america['2023'].sum() / df_north_america['Area'].sum()],
        ['South America', df_south_america['2023'].sum() / df_south_america['Area'].sum()],
        ['Oceania', df_oceania['2023'].sum() / df_oceania['Area'].sum()]]

df_cont = pd.DataFrame(data, columns=['Continent', 'Density'])

print(df_cont)
# Density (per kmÂ²) in population per Continent / World

df_cont_den=df_cont[['Continent', 'Density']].groupby('Continent').mean()
df_cont_den=df_cont_den.reset_index()

fig = px.bar(df_cont_den, y='Density', x='Continent', text_auto='.3s',
             title="Density (per kmÂ²) in population per Continent", color='Continent')
fig.show()  # If on colab use -> fig.show(renderer="colob") 
# Growth Rate
# average population growth rate

df['GrowthRate'].mean()
Since 1972 (50 years ago), the world population growth rate declined from around 2% per year to under 1.0% per year. (0.97%)
# Growth Rate in population per Continent - Mean

df_continent_growth=df[['Continent', 'GrowthRate']].groupby('Continent').mean()
df_continent_growth=df_continent_growth.reset_index()


fig = px.bar(df_continent_growth, y='GrowthRate', x='Continent', text_auto='.5s',
             title="Growth Rate in population per Continent", color='Continent')
fig.show()  # If on colab use -> fig.show(renderer="colob") 
# highest Growth Rate according to Country

import plotly.express as px

pop_2023 = pd.DataFrame(df.groupby('Country')[['Country','GrowthRate']].mean().sort_values('GrowthRate', ascending=False).round(2).head(10))
fig = px.bar(pop_2023, x = pop_2023.index, y = 'GrowthRate',
            title = 'Highest Growth Rate according to Country in 2023', template = 'seaborn', color = pop_2023.index, text = 'GrowthRate')
fig.show()  # If on colab use -> fig.show(renderer="colob") 
pop_2023
# Lowest Growth Rate according to Country

import plotly.express as px

pop_2023 = pd.DataFrame(df.groupby('Country')[['Country','GrowthRate']].mean().sort_values('GrowthRate', ascending=True).round(2).head(10))
fig = px.bar(pop_2023, x = pop_2023.index, y = 'GrowthRate',
            title = 'Lowest Growth Rate according to Country', template = 'seaborn', color = pop_2023.index, text = 'GrowthRate')
fig.show()  # If on colab use -> fig.show(renderer="colob") 
pop_2023

top10 = df.sort_values('2023', ascending=False).head(10)
top10 = top10.melt(id_vars=['Country'], value_vars=['2022','2020','2015', '2010', '2000', '1990', '1980', '1970'], var_name='Year', value_name='Population')
top10.head(10)
fig = px.line(top10, x='Country', y='Population', color='Year', markers=True, title='Top 10 Countries with Biggest Population Growth Throughout 1970-2022')
fig.show()  # If on colab use -> fig.show(renderer="colob") 
# plotting top 10 highest growth rate countries in the last 30 years
gwr_top10 = df.sort_values(by='Country').sort_values(by='GrowthRate', ascending=False).head(10)
fig, ax = plt.subplots(figsize=(16,8))
plt.plot(gwr_top10['Country'], gwr_top10['2023'], label='2023', marker='o')
plt.plot(gwr_top10['Country'], gwr_top10['1970'], label='1970', marker='d')

plt.xlabel('Country')
plt.ylabel('GrowthRate')
plt.grid(linewidth=0.3)
plt.title('Counrtries with most Growth Rate in the last 53 years')
plt.legend()
plt.show()
# Population Projections
df
# relationship betewen years and total population, we will convert years to int type.

df_tot = pd.DataFrame(df[years].sum(axis=0)) # use the sum() method to get the total population per year

df_tot.index = map(int, df_tot.index) # change the years to type int (useful for regression later on)

df_tot.reset_index(inplace = True) # reset the index to put in back in as a column in the df_tot dataframe

df_tot.columns = ['year', 'total'] # rename columns

df_tot
# plotting a scatter plot for year vs total population

df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='black')

plt.title('Current World Population')
plt.xlabel('Year')
plt.ylabel('Population')

plt.show()
# fitting our data

x = df_tot['year']      
y = df_tot['total']    
fit = np.polyfit(x, y, deg=1)

fit
# plotting the regression line on the scatter plot

df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='black')

plt.title('World Population 1970 - 2023')
plt.xlabel('Year')
plt.ylabel('Population')

# plot line of best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))

plt.show()

# print out the line of best fit
'World Population = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1])
Using the equation of line of best fit, we can estimate the number of world population by 2030:

World Population = 83187524 * Year - 160587659522
World Population = 83187524 * 2030 - 160587659522
World Population = 83187524 * 2030 - 160587659522 = 8,283,014,198 (approximately 8.3 billon) 

# Trend line with new population estimated years added
df_projections = df.iloc[:,5:14].sum()[::-1]
df_projections
df_projections['2030']=8283014198
df_projections['2040']=9114889438
df_projections['2050']=9946764678             
df_projections
df_projections=df_projections.drop(['2022','2015','2023'],axis=0)
df_projections
# plotting world population trend since 1970 to future 2050

plt.subplots(figsize=(10,5))
trend = df_projections
sns.lineplot(x=trend.index, y=trend.values, marker="o")
plt.xticks(rotation=0)
plt.ylabel("Population")
plt.title("World Population Estimations")
plt.show()
